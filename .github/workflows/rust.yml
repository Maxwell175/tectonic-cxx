name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: linux-x86_64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: windows-x86_64

          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: macos-x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: macos-arm64

    runs-on: ${{ matrix.os }}

    env:
      VCPKG_DEFAULT_TRIPLET: "x64-windows-static"
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            libicu-dev \
            libssl-dev \
            pkg-config

      - name: Install cargo-vcpkg
        if: matrix.os == 'windows-latest'
        run: cargo install --git https://github.com/mcgoo/cargo-vcpkg --branch master cargo-vcpkg

      - name: Setup build variables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "VCPKG_ROOT=${{ github.workspace }}/target/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TECTONIC_DEP_BACKEND=vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/target/vcpkg-cache" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          mkdir -p "${{ github.workspace }}/target/vcpkg-cache"
          echo "RUSTFLAGS=-Ctarget-feature=+crt-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKGRS_TRIPLET=x64-windows-static-release" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_DEFAULT_HOST_TRIPLET=x64-windows-static-release" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "RUST_TEST_THREADS=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Load vcpkg cache
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/target/vcpkg-cache
          key: vcpkg-${{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build vcpkg deps
        if: matrix.os == 'windows-latest'
        run: cargo vcpkg -v build --target ${{ matrix.target }}

      - name: Set up pkg-config for cross-compilation
        # This is not needed for the vcpkg-based Windows build
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-c
        run: cargo install cargo-c

      - name: Build static library (macOS)
        if: matrix.os == 'macos-latest'
        env:
          PKG_CONFIG_PATH: "/opt/homebrew/opt/icu4c/lib/pkgconfig"
          CXXFLAGS: "-I/opt/homebrew/opt/harfbuzz/include -std=c++17"
          CFLAGS: "-I/opt/homebrew/opt/harfbuzz/include"
        shell: bash
        run: |
          cargo cinstall \
            --target ${{ matrix.target }} \
            --prefix=./dist \
            --library-type=staticlib

      - name: Build static library (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Run the build
          cargo cinstall --target ${{ matrix.target }} --prefix ./dist --library-type=staticlib


      - name: Build static library (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cargo cinstall \
            --target ${{ matrix.target }} \
            --prefix=./dist \
            --library-type=staticlib

      - name: Verify build artifacts
        run: |
          echo "Build artifacts for ${{ matrix.target }}:"
          ls -la dist/
          echo "Library files:"
          find dist/ -name "*.a" -o -name "*.lib" | head -10
          echo "Header files:"
          find dist/ -name "*.h" | head -10
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tectonic-${{ matrix.artifact-name }}
          path: dist/

  # Create universal macOS binary combining x86_64 and arm64
  macos-universal:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download macOS x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: tectonic-macos-x86_64
          path: ./macos-x86_64

      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: tectonic-macos-arm64
          path: ./macos-arm64

      - name: Create universal binary
        run: |
          mkdir -p ./dist/lib
          mkdir -p ./dist/include
          
          # Copy headers from x86_64 build (they should be identical)
          cp -r ./macos-x86_64/include/* ./dist/include/
          
          # Create universal static library using lipo
          lipo -create \
            ./macos-x86_64/lib/libtectonic.a \
            ./macos-arm64/lib/libtectonic.a \
            -output ./dist/lib/libtectonic.a
          
          # Copy pkg-config file for universal binary
          mkdir -p ./dist/lib/pkgconfig
          cp ./macos-x86_64/lib/pkgconfig/tectonic.pc ./dist/lib/pkgconfig/ || true

      - name: Verify universal binary
        run: |
          echo "Universal macOS binary info:"
          file ./dist/lib/libtectonic.a
          lipo -info ./dist/lib/libtectonic.a
          echo "Build artifacts:"
          ls -la dist/

      - name: Upload universal macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: tectonic-macos-universal
          path: dist/
